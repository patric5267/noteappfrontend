import { createReducer } from "@reduxjs/toolkit";

const initialstate = {
     isloadingnote:false,
     isloading:false,
     message:null,
     iserror:false,
     token:null,
     data:null,
     email:null,
     dataarray:null
}

const authreducer = createReducer(initialstate , {
    signuppending:(state)=>{
        state.isloading=true
    },
    signupsuccess:(state,action)=>{
        state.isloading=false
        state.message=action.payload
    },
    signupfailure:(state,action)=>{
        state.isloading=true
        state.message=action.payload
        state.iserror=true
    },
    loginpending:(state)=>{
        state.isloading=true
    },
    loginsuccess:(state,action)=>{
        state.isloading=false
        state.message=action.payload[0]
        state.token=action.payload[1]
    },
    loginfailure:(state)=>{
        state.iserror=true
    },
    getuserpending:(state)=>{
      state.isloading=true
      state.dataarray=null
    },
    getusersuccess:(state,action)=>{
      state.isloading=false
      state.data=action.payload
      state.email=action.payload.email
    },
    getuserfailure:(state)=>{
      state.iserror=true
    },
    addnotepending:(state)=>{
      state.isloading=true
    },
    addnotesuccess:(state,action)=>{
        state.isloading=false
        state.message=action.payload
    },
    addnotefailure:(state)=>{
        state.iserror=true
    },
    fetchnotepending:(state)=>{
        state.isloadingnote=true
    },
    fetchnotesuccess:(state,action)=>{
       state.isloadingnote=false
       state.dataarray=action.payload
    },
    fetchnotefailure:(state)=>{
      state.iserror=true
    },
    updatenotepending:(state)=>{
        state.isloading=true
    },
    updatenotesuccess:(state,action)=>{
        state.isloading=false
        state.message=action.payload
    },
    updatenotefailure:(state)=>{
       state.iserror=true
    },
    deletenotepending:(state)=>{
      state.isloading=true
    },
    deletenotesuccess:(state,action)=>{
        state.isloading=false
        state.message=action.payload
    },
    deletenotefailure:(state)=>{
        state.iserror=true
    },
    clearmessage:(state)=>{
        state.message=null
    },
    updatpasswordpending:(state)=>{
        state.isloading=true
    },
    updatepasswordsuccess:(state,action)=>{
        state.isloading=false
        state.message=action.payload
    },
    updatepasswordfailure:(state)=>{
        state.iserror=true
    },
    deleteaccountpending:(state)=>{
       state.isloading=true
    },
    deleteaccountuccess:(state,action)=>{
       state.isloading=false
       state.message=action.payload
    },
    deleteaccountfailure:(state)=>{
       state.iserror=true
    },
    deleteallnotespending:(state)=>{
       state.isloading=true
    },
    deleteallnotessuccess:(state,action)=>{
        state.isloading=false
        state.message=action.payload
    },
    deleteallnotesfailure:(state)=>{
        state.iserror=true
    },
    cleardata:(state)=>{
       state.data=null
    },
    clearmail:(state)=>{
        state.email=null
    },
    cleardataarray:(state)=>{
        state.dataarray=null
    }

})

export default authreducer